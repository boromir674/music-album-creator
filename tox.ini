[tox]
envlist =
    {py311, py310, py39, py38, py37, py36}-{dev, sdist, wheel}-{linux, macos, windows}
isolated_build = true
skip_missing_interpreters = {env:TOX_SKIP_MISSING_INTERPRETERS:True}
passenv = TOXENV CI CODECOV_*

[gh-actions]
python =
    3.6: {py36}{, -path, -sdist, -wheel, -dev}
    3.7: {py37}{, -path, -sdist, -wheel, -dev}
    3.8: {py38}{, -path, -sdist, -wheel, -dev}
    3.9: {py39}{, -path, -sdist, -wheel, -dev}
    3.10: {py310}{, -path, -sdist, -wheel, -dev}
    3.11: {py311}{, -path, -sdist, -wheel, -dev}


[gh-actions:env]
PLATFORM =
    ubuntu-latest: linux
    macos-latest: macos
    windows-latest: windows


[testenv]
; basepython =
;     {docs,spell,dev,dev-cov,notebook}: {env:TOXPYTHON:python3}
;     {bootstrap,clean,check,report,codecov,coveralls,quality}: {env:TOXPYTHON:python3}
passenv =
    YOUTUBE_DL
    CI_*
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHOUNBUFFERED=yes
    PIP_DISABLE_PIP_VERSION_CHECK=1
    VIRTUALENV_NO_DOWNLOAD=1
    DIST_DIR = dist
    PY_PACKAGE = music_album_creation
extras = test
commands =
    {posargs:pytest --cov --cov-report=term-missing -vv}
;    {posargs:pytest -vv --ignore=src}


[testenv:dev]
description = Install in 'edit' mode and test
usedevelop = true
commands = pytest {posargs:-ra tests -vv -s}

[testenv:dev-cov]
description = Install in 'edit' mode, Test & measure Coverage
usedevelop = true
commands =
    pytest -ra --cov --cov-report=term-missing \
      --cov-report=html:{envdir}/htmlcov --cov-context=test \
      --cov-report=xml:{toxworkdir}/coverage.{envname}.xml \
      {posargs:-n auto} {toxinidir}{/}tests

## COVERAGE
[testenv:coverage]
description = Combine coverage from test environments
passenv =
    DIFF_AGAINST
setenv =
    COVERAGE_FILE = {toxworkdir}/.coverage
skip_install = true
deps =
    coverage[toml]>=5.1
    diff_cover>=6
parallel_show_output = true
commands =
    coverage combine
    coverage report --skip-covered --show-missing -i
    coverage xml -o {toxworkdir}/coverage.xml -i
    coverage html -d {toxworkdir}/htmlcov -i
depends = {py311, py310, py39, py38, py37, py36}{, -path, -sdist, -wheel, -dev}

[testenv:clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:notebook]
description = Run ML ops in jupyter notebook
extras = notebook
usedevelop = true
commands =
    ; poetry install -E notebook
    jupyter notebook
; jupyter notebook


## PYTHON PACKAGING

[testenv:build]
description = Create a source and wheel distribution.
    Creates .tar.gz and .whl files in the {env:DIST_DIR} folder, that can be upload to a pypi index server.
basepython = {env:TOXPYTHON:python3}
deps = build
skip_install = true
changedir = {toxinidir}
commands_pre =
    python -c 'import os; import shutil; d = "{env:DIST_DIR}"; exec("if os.path.exists(d):\n    shutil.rmtree(d)");'
commands =
    python -m build {toxinidir} --outdir {env:DIST_DIR}

[testenv:check]
description = Check the code for compliance with best practises of Python packaging ecosystem (PyPI, pip, Distribute, etc).
deps =
    poetry-core
    pyroma
    twine
skip_install = true
commands =
    pyroma --directory {toxinidir}
    pyroma --file {env:DIST_DIR}/{env:PY_PACKAGE}-{env:PKG_VERSION}.tar.gz
    python -m twine check {env:DIST_DIR}/{env:PY_PACKAGE}-{env:PKG_VERSION}*
    # TODO Improvement run 'pyroma --pypi' from some script/CI server after uploading to test-pypi
depends = build


#####################################################################
[testenv:report]
deps = coverage
skip_install = true
commands =
    coverage report
    coverage html

############## DOCS ##############

[testenv:spell]
setenv =
    SPELLCHECK=1
usedevelop = true
extras = docs
; deps =
;     setuptools >= 40.0.0
;     -r{toxinidir}/docs/requirements.txt
;     pyenchant
;     sphinxcontrib-spelling
commands =
    sphinx-build -b spelling docs dist/docs

[testenv:docs]
; deps =
;     setuptools >= 40.0.0
;     -r{toxinidir}/docs/requirements.txt
usedevelop = true
extras = docs
commands =
    sphinx-build {posargs:-E} -b doctest docs dist/docs
    sphinx-build {posargs:-E} -b html docs dist/docs
    sphinx-build -b linkcheck docs dist/docs



# SDIST
[testenv:{py311, py310, py39, py38, py37, py36, pypy3}-sdist{, -linux, -macos, -windows}]
description = Install as Source Distribution & Test

# WHEEL
[testenv:{py311, py310, py39, py38, py37, py36, pypy3}-wheel{, -linux, -macos, -windows}]
description = Install as Wheel & Test
skip_install = true
changedir = {toxinidir}
commands_pre =
    python -c 'import os; d = "{env:DIST_DIR}"; import shutil; exec("if os.path.exists(d):\n    shutil.rmtree(d)");'
commands =
    pip wheel --wheel-dir {toxworkdir}{/}{env:DIST_DIR} --cache-dir {envdir} {toxinidir}
    pip install --exists-action w --force-reinstall "{toxworkdir}{/}{env:DIST_DIR}{/}{env:PY_PACKAGE}-{env:PKG_VERSION}-py3-none-any.whl[test]"
    {[testenv]commands}

# DEV
[testenv:{py311, py310, py39, py38, py37, py36, pypy3}-dev{, -linux, -macos, -windows}]
description = Install in 'edit' mode & Test
usedevelop = true


# Static Type Checking (MYPY)
[testenv:type]
description = Static Type Checking with mypy
basepython = {env:TOXPYTHON:python3}
extras = typing
usedevelop = true
changedir = {toxinidir}
commands = mypy --show-error-codes {posargs:src{/}{env:PY_PACKAGE} tests}
